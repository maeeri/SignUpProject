@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Options

@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> locOptions

@{
    var currentRequestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = locOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
        .ToList();
    var responseUrl = string.IsNullOrEmpty(Context.Request.Path) ? "~/" :
        $"~{Context.Request.Path.Value}";
    var currentUrl = UriHelper.BuildRelative(Context.Request.PathBase, Context.Request.Path, Context.Request.QueryString);
}

<div class="language" title="@Localizer["Request the culture provider:"]
     @currentRequestCulture?.Provider?.GetType().Name">
    <form id="selectLanguage" asp-controller="Home" 
          asp-action="SetAppLanguage" 
          method="post" class="form-horizontal" role="form">
        <label asp-for="@currentRequestCulture.RequestCulture.UICulture.Name">
            @Localizer["Select language:"]
        </label>
        <input type="hidden" name="returnUrl" value="@currentUrl">
        <select name="culture"
                onchange="this.form.submit();"
                asp-for="@currentRequestCulture.RequestCulture.UICulture.Name" 
                asp-items="cultureItems">
        </select>
    </form>
</div>